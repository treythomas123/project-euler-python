# The sequence of triangle numbers is generated by adding the natural numbers.
# So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first
# ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
# 1: 1
# 3: 1,3
# 6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?

import itertools
from operator import mul

def primeFactors(product):
    factors = []
    possibleFactor = 2
    
    while product > 1:
        if product % possibleFactor == 0:
            product = product / possibleFactor
            factors.append( possibleFactor )
        else:
            possibleFactor = possibleFactor + 1
    
    return factors


def numberOfComposites(factors):
    composits = [1]
    
    for j in range( 1, len(factors)+1 ):
        for i in itertools.combinations(factors, j):
            composits.append( reduce(mul, i) )
    
    return len( set(composits) )


def triangleNumber(num):
    return sum( range(1,num+1) )


i = 0
divisors = 0
while divisors < 500:
    triangle = triangleNumber(i)
    divisors = numberOfComposites( primeFactors(triangle) )
    i += 1
    
print triangle
